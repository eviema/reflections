-- 1: How did viewing a diff between two versions of a file help you
see the bug that was introduced?

On mac, a plus sign is placed at the beginning of each line that was
modified in the new file, and a minus sign is placed at the beginning
of each line modified to show what it was like previously.

This helps to compare the old and the new to see what are the changes
as well as what errors were introduced while creating the new file.


-- 2: How could having easy access to the entire history of a file
make you a more efficient programmer in the long term?

You don't have to create copies of your files manually each time after you've
edited them.

You can easily revert to a previous version you choose.

You may not remember what your previous versions were like
if you didn't save them, so having the entire history is handy
when you need to check the previous versions of your file.


-- 3: What do you think are the pros and cons of manually choosing
when to commit, like you do in Git, vs having versions automatically saved,
like Google Doc does?

pros:
Avoids cluttering git log with too many logically equivalent changes.
Commit messages are manually input, allowing a better understanding of
what the change does.

cons:
May be forgetful, making too big commits and making it too hard to understand
the changes.
Takes up too much space for git log.


-- 4: Why do you think some version control systems, like Git,
allow saving multiple files in one commit, while others, like Google Docs, treat
each file separately?

Version control systems like Git are used by coders, who often
find it necessary to save the status of all files in the same repository
since all these files are required to run the program and it's important that
they are in sync.
Others like Google Docs are more likely to be used for individual documents
that are often not related to one another. Hence it doesn't make much sense
to save all files when changes only occur in one of them.


-- 5: How can you use the commands git log and git diff
to view the history of files?

To see all the commits/changes made, use git log in the current working
directory. Once we see the history of all commits, we can choose two commits
to compare, by using git diff commit_id_1 commit_id_2 .


-- 6: How might using version control make you more confident to
make changes that could break something?

By checking different commits via git checkout commit_id, I can locate
the commit that introduced the bug, and then use git diff to compare
the commit and the previous one in order to find out what went wrong
in the code and fix it.


-- 7: Now that you have your workspace set up, what do you want to
try using Git for?

I want to try using Git for comparing different versions of files in a
repository. 
